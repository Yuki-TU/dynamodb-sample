// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ユーザー登録
	// (POST /users)
	CreateUser(c *gin.Context)
	// ユーザー情報取得
	// (GET /users/{userId})
	GetUserByID(c *gin.Context, userId int)
	// ユーザー情報更新
	// (PUT /users/{userId})
	UpdateUserByID(c *gin.Context, userId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserByID(c, userId)
}

// UpdateUserByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserByID(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUserByID)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.UpdateUserByID)
}

type N400ErrorJSONResponse Error

type N401UnauthorizedErrorJSONResponse Error

type N404ErrorJSONResponse Error

type N500ErrorJSONResponse Error

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct {
	UserId int64 `json:"userId"`
}

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse struct{ N400ErrorJSONResponse }

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser401JSONResponse struct {
	N401UnauthorizedErrorJSONResponse
}

func (response CreateUser401JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser404JSONResponse struct{ N404ErrorJSONResponse }

func (response CreateUser404JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser500JSONResponse struct{ N500ErrorJSONResponse }

func (response CreateUser500JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIDRequestObject struct {
	UserId int `json:"userId"`
}

type GetUserByIDResponseObject interface {
	VisitGetUserByIDResponse(w http.ResponseWriter) error
}

type GetUserByID200JSONResponse struct {
	FamilyName     string  `json:"familyName"`
	FamilyNameKana string  `json:"familyNameKana"`
	FirstName      string  `json:"firstName"`
	FirstNameKana  string  `json:"firstNameKana"`
	UserId         float32 `json:"userId"`
}

func (response GetUserByID200JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByID404JSONResponse struct{ N404ErrorJSONResponse }

func (response GetUserByID404JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByID500JSONResponse struct{ N500ErrorJSONResponse }

func (response GetUserByID500JSONResponse) VisitGetUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByIDRequestObject struct {
	UserId int `json:"userId"`
	Body   *UpdateUserByIDJSONRequestBody
}

type UpdateUserByIDResponseObject interface {
	VisitUpdateUserByIDResponse(w http.ResponseWriter) error
}

type UpdateUserByID200JSONResponse struct {
	Status string `json:"status"`
}

func (response UpdateUserByID200JSONResponse) VisitUpdateUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByID400JSONResponse struct{ N400ErrorJSONResponse }

func (response UpdateUserByID400JSONResponse) VisitUpdateUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByID401JSONResponse struct {
	N401UnauthorizedErrorJSONResponse
}

func (response UpdateUserByID401JSONResponse) VisitUpdateUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByID404JSONResponse struct{ N404ErrorJSONResponse }

func (response UpdateUserByID404JSONResponse) VisitUpdateUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByID500JSONResponse struct{ N500ErrorJSONResponse }

func (response UpdateUserByID500JSONResponse) VisitUpdateUserByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ユーザー登録
	// (POST /users)
	CreateUser(ctx *gin.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// ユーザー情報取得
	// (GET /users/{userId})
	GetUserByID(ctx *gin.Context, request GetUserByIDRequestObject) (GetUserByIDResponseObject, error)
	// ユーザー情報更新
	// (PUT /users/{userId})
	UpdateUserByID(ctx *gin.Context, request UpdateUserByIDRequestObject) (UpdateUserByIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByID operation middleware
func (sh *strictHandler) GetUserByID(ctx *gin.Context, userId int) {
	var request GetUserByIDRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByID(ctx, request.(GetUserByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserByIDResponseObject); ok {
		if err := validResponse.VisitGetUserByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserByID operation middleware
func (sh *strictHandler) UpdateUserByID(ctx *gin.Context, userId int) {
	var request UpdateUserByIDRequestObject

	request.UserId = userId

	var body UpdateUserByIDJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserByID(ctx, request.(UpdateUserByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserByIDResponseObject); ok {
		if err := validResponse.VisitUpdateUserByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
